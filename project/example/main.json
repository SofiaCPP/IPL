{
  "type": "program_expression",
  "statements": [
    {
      "type": "binary_expression",
      "operator": "=",
      "left": {
        "type": "call_expression",
        "caller": {
          "type": "identifier_expression",
          "value": "identifier"
        }
      },
      "right": {
        "type": "number_expression",
        "value": "1.000000"
      }
    },
    {
      "type": "function_expression",
      "name": {
        "type": "identifier_expression",
        "value": "function_identifier"
      },
      "args": {
        "type": "arguments_expression",
        "args": []
      },
      "body": {
        "type": "program_expression",
        "statements": []
      }
    },
    {
      "type": "function_expression",
      "name": {
        "type": "identifier_expression",
        "value": "function_identifier_2"
      },
      "args": {
        "type": "arguments_expression",
        "args": [
          {
            "type": "identifier_expression",
            "value": "argument1"
          },
          {
            "type": "identifier_expression",
            "value": "argument2"
          }
        ]
      },
      "body": {
        "type": "program_expression",
        "statements": [
          {
            "type": "if_expression",
            "condition": {
              "type": "binary_expression",
              "operator": "==",
              "left": {
                "type": "call_expression",
                "caller": {
                  "type": "identifier_expression",
                  "value": "argument1"
                }
              },
              "right": {
                "type": "call_expression",
                "caller": {
                  "type": "identifier_expression",
                  "value": "argument2"
                }
              }
            },
            "then_expr": {
              "type": "program_expression",
              "statements": [
                {
                  "type": "binary_expression",
                  "operator": "+",
                  "left": {
                    "type": "call_expression",
                    "caller": {
                      "type": "identifier_expression",
                      "value": "argument1"
                    }
                  },
                  "right": {
                    "type": "call_expression",
                    "caller": {
                      "type": "identifier_expression",
                      "value": "argument2"
                    }
                  }
                }
              ]
            },
            "else_expr": {
              "type": "if_expression",
              "condition": {
                "type": "binary_expression",
                "operator": "<",
                "left": {
                  "type": "call_expression",
                  "caller": {
                    "type": "identifier_expression",
                    "value": "argument1"
                  }
                },
                "right": {
                  "type": "call_expression",
                  "caller": {
                    "type": "identifier_expression",
                    "value": "argument2"
                  }
                }
              },
              "then_expr": {
                "type": "program_expression",
                "statements": [
                  {
                    "type": "binary_expression",
                    "operator": "*",
                    "left": {
                      "type": "call_expression",
                      "caller": {
                        "type": "identifier_expression",
                        "value": "argument1"
                      }
                    },
                    "right": {
                      "type": "call_expression",
                      "caller": {
                        "type": "identifier_expression",
                        "value": "argument2"
                      }
                    }
                  }
                ]
              },
              "else_expr": {
                "type": "program_expression",
                "statements": [
                  {
                    "type": "binary_expression",
                    "operator": "-",
                    "left": {
                      "type": "call_expression",
                      "caller": {
                        "type": "identifier_expression",
                        "value": "argument1"
                      }
                    },
                    "right": {
                      "type": "call_expression",
                      "caller": {
                        "type": "identifier_expression",
                        "value": "argument2"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "type": "case_expression",
      "condition": {
        "type": "call_expression",
        "caller": {
          "type": "identifier_expression",
          "value": "identifier"
        }
      },
      "when_exprs": [
        {
          "type": "when_expression",
          "condition": {
            "type": "number_expression",
            "value": "1.000000"
          },
          "body": {
            "type": "program_expression",
            "statements": [
              {
                "type": "symbol_expression",
                "value": ":one"
              }
            ]
          }
        },
        {
          "type": "when_expression",
          "condition": {
            "type": "number_expression",
            "value": "2.000000"
          },
          "body": {
            "type": "program_expression",
            "statements": [
              {
                "type": "symbol_expression",
                "value": ":two"
              }
            ]
          }
        },
        {
          "type": "when_expression",
          "condition": {
            "type": "number_expression",
            "value": "3.000000"
          },
          "body": {
            "type": "program_expression",
            "statements": [
              {
                "type": "symbol_expression",
                "value": ":three"
              }
            ]
          }
        }
      ],
      "else_expr": {
        "type": "program_expression",
        "statements": [
          {
            "type": "string_expression",
            "value": "'default'"
          }
        ]
      }
    },
    {
      "type": "while_expression",
      "condition": {
        "type": "boolean_expression",
        "value": "true"
      },
      "body": {
        "type": "program_expression",
        "statements": [
          {
            "type": "boolean_expression",
            "value": "false"
          }
        ]
      }
    },
    {
      "type": "for_expression",
      "var": {
        "type": "identifier_expression",
        "value": "i"
      },
      "expr": {
        "type": "list_expression",
        "elements": [
          {
            "type": "number_expression",
            "value": "1.000000"
          },
          {
            "type": "number_expression",
            "value": "2.000000"
          },
          {
            "type": "number_expression",
            "value": "3.000000"
          }
        ]
      },
      "body": {
        "type": "program_expression",
        "statements": [
          {
            "type": "if_expression",
            "condition": {
              "type": "unary_expression",
              "operator": "!",
              "expr": {
                "type": "binary_expression",
                "operator": "==",
                "left": {
                  "type": "call_expression",
                  "caller": {
                    "type": "identifier_expression",
                    "value": "i"
                  }
                },
                "right": {
                  "type": "number_expression",
                  "value": "2.000000"
                }
              }
            },
            "then_expr": {
              "type": "program_expression",
              "statements": [
                {
                  "type": "boolean_expression",
                  "value": "true"
                }
              ]
            },
            "else_expr": {
              "type": "program_expression",
              "statements": [
                {
                  "type": "boolean_expression",
                  "value": "false"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "while_expression",
      "condition": {
        "type": "unary_expression",
        "operator": "!",
        "expr": {
          "type": "boolean_expression",
          "value": "false"
        }
      },
      "body": {
        "type": "program_expression",
        "statements": [
          {
            "type": "boolean_expression",
            "value": "true"
          }
        ]
      }
    },
    {
      "type": "if_expression",
      "condition": {
        "type": "binary_expression",
        "operator": "==",
        "left": {
          "type": "call_expression",
          "caller": {
            "type": "identifier_expression",
            "value": "a"
          }
        },
        "right": {
          "type": "number_expression",
          "value": "5.000000"
        }
      },
      "then_expr": {
        "type": "call_expression",
        "caller": {
          "type": "identifier_expression",
          "value": "call_function"
        }
      }
    },
    {
      "type": "if_expression",
      "condition": {
        "type": "unary_expression",
        "operator": "!",
        "expr": {
          "type": "binary_expression",
          "operator": "==",
          "left": {
            "type": "call_expression",
            "caller": {
              "type": "identifier_expression",
              "value": "b"
            }
          },
          "right": {
            "type": "number_expression",
            "value": "4.000000"
          }
        }
      },
      "then_expr": {
        "type": "call_expression",
        "caller": {
          "type": "identifier_expression",
          "value": "call_function2"
        }
      }
    },
    {
      "type": "while_expression",
      "condition": {
        "type": "boolean_expression",
        "value": "true"
      },
      "body": {
        "type": "call_expression",
        "caller": {
          "type": "identifier_expression",
          "value": "call_function3"
        }
      }
    },
    {
      "type": "while_expression",
      "condition": {
        "type": "unary_expression",
        "operator": "!",
        "expr": {
          "type": "binary_expression",
          "operator": "==",
          "left": {
            "type": "call_expression",
            "caller": {
              "type": "identifier_expression",
              "value": "Class::Module.fetch"
            }
          },
          "right": {
            "type": "symbol_expression",
            "value": ":'test'"
          }
        }
      },
      "body": {
        "type": "call_expression",
        "caller": {
          "type": "identifier_expression",
          "value": "call_function4"
        }
      }
    },
    {
      "type": "call_expression",
      "caller": {
        "type": "identifier_expression",
        "value": "function_identifier"
      },
      "block": {
        "type": "function_expression",
        "args": {
          "type": "arguments_expression",
          "args": [
            {
              "type": "identifier_expression",
              "value": "argument1"
            }
          ]
        },
        "body": {
          "type": "program_expression",
          "statements": [
            {
              "type": "call_expression",
              "caller": {
                "type": "identifier_expression",
                "value": "argument1"
              }
            }
          ]
        }
      }
    },
    {
      "type": "class_expression",
      "name": {
        "type": "identifier_expression",
        "value": "Class"
      },
      "body": {
        "type": "program_expression",
        "statements": [
          {
            "type": "function_expression",
            "name": {
              "type": "identifier_expression",
              "value": "class_method"
            },
            "args": {
              "type": "arguments_expression",
              "args": []
            },
            "body": {
              "type": "program_expression",
              "statements": [
                {
                  "type": "binary_expression",
                  "operator": "*=",
                  "left": {
                    "type": "number_expression",
                    "value": "1.000000"
                  },
                  "right": {
                    "type": "number_expression",
                    "value": "2.000000"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "class_expression",
      "name": {
        "type": "identifier_expression",
        "value": "Module"
      },
      "body": {
        "type": "program_expression",
        "statements": [
          {
            "type": "function_expression",
            "name": {
              "type": "identifier_expression",
              "value": "module_method"
            },
            "args": {
              "type": "arguments_expression",
              "args": [
                {
                  "type": "identifier_expression",
                  "value": "arg"
                }
              ]
            },
            "body": {
              "type": "program_expression",
              "statements": [
                {
                  "type": "binary_expression",
                  "operator": "*=",
                  "left": {
                    "type": "number_expression",
                    "value": "2.000000"
                  },
                  "right": {
                    "type": "number_expression",
                    "value": "3.000000"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "call_expression",
      "caller": {
        "type": "identifier_expression",
        "value": "Class::Module.module_method"
      },
      "block": {
        "type": "function_expression",
        "body": {
          "type": "program_expression",
          "statements": [
            {
              "type": "binary_expression",
              "operator": "+",
              "left": {
                "type": "number_expression",
                "value": "1.000000"
              },
              "right": {
                "type": "number_expression",
                "value": "2.000000"
              }
            }
          ]
        }
      }
    },
    {
      "type": "hash_expression",
      "elements": [
        {
          "type": "hash_element_expression",
          "key": {
            "type": "identifier_expression",
            "value": "a"
          },
          "value": {
            "type": "number_expression",
            "value": "1.000000"
          }
        },
        {
          "type": "hash_element_expression",
          "key": {
            "type": "identifier_expression",
            "value": "b"
          },
          "value": {
            "type": "number_expression",
            "value": "3.000000"
          }
        }
      ]
    }
  ]
}